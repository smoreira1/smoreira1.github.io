---
import FallbackNotice from '../components/FallbackNotice.astro';
import HeadCommon from '../components/HeadCommon.astro';
import HeadSEO from '../components/HeadSEO.astro';
import Header from '../components/Header/Header.astro';
import PageContent from '../components/PageContent/PageContent.astro';
import LeftSidebar from '../components/LeftSidebar/LeftSidebar.astro';
import RightSidebar from '../components/RightSidebar/RightSidebar.astro';
import { getLanguageFromURL } from '../util';
import { normalizeLangTag } from '../i18n/bcp-normalize';
import { useTranslations } from '../i18n/util';

const { content = {}, hideRightSidebar = false } = Astro.props;
const isFallback = !!Astro.params.fallback;
const url = new URL(Astro.request.url);
const lang = getLanguageFromURL(url.pathname);
const bcpLang = normalizeLangTag(lang);
const currentPage = url.pathname;
const filePath = `src/pages${currentPage.replace(/\/$/, '')}.md`;
const currentFile = isFallback ? filePath.replace(`/${lang}/`, '/en/') : filePath;
const t = useTranslations(Astro);
const formatTitle = (content) => (content.title ? `${content.title} ðŸš€ ${t('site.title')}` : t('site.title'));
const githubEditUrl = content.githubURL && (lang === 'en' || isFallback)
  ? `${content.githubURL}README.md`
  : `https://github.com/withastro/docs/blob/main/${currentFile}`;
// Ensures the canonicalURL always has an trailing slash.
const canonicalURL = new URL(Astro.url.pathname.replace(/([^/])$/, '$1/'), Astro.site);
if (isFallback) canonicalURL.pathname = canonicalURL.pathname.replace(`/${lang}/`, '/en/');
---

<html dir={content.dir ?? 'ltr'} lang={bcpLang} class="initial">
	<head>
		<HeadCommon />
		<HeadSEO {content} {canonicalURL} />
		<title set:html={formatTitle(content)} />
		<style>
			.sidebar {
				position: fixed;
				top: 0;
				bottom: 0;
				padding: 0;
			}
			#left-sidebar {
				display: none;
				background: var(--theme-bg-gradient);
				z-index: 10;
				left: 0;
			}
			#right-sidebar {
				display: none;
				top: var(--theme-navbar-height);
				right: 0;
				width: var(--theme-right-sidebar-width);
			}
			#main-content {
				display: flex;
				flex-direction: column;
				height: 100%;
				min-width: 0;
			}

			/* Allow showing left sidebar as an overlay, but only while viewport stays narrow */
			@media not screen and (min-width: 50em) {
				/* Make the left sidebar visible and fill the entire viewport below the navbar */
				:global(.mobile-sidebar-toggle #left-sidebar) {
					display: block;
					top: var(--theme-navbar-height);
					right: 0;
				}
				/*
					Try to prevent the rest of the page from scrolling,
					and the main content from being visible below the overlay.

					Unfortunately, iOS Safari doesn't currently play well with this
					and will sometimes still scroll the page even though it shouldn't.

					Once overscroll-behavior is properly supported, this should be fixed.
				*/
				:global(.mobile-sidebar-toggle) {
					overflow: hidden;
				}
				:global(.mobile-sidebar-toggle #main-content) {
					visibility: hidden;
				}
				:global(.mobile-sidebar-toggle #left-sidebar ul) {
					overscroll-behavior: contain;
				}
			}

			@media (min-width: 50em) {
				#main-content {
					margin-left: var(--theme-left-sidebar-width);
				}
				#left-sidebar {
					display: flex;
					padding-inline-start: var(--min-spacing-inline);
					padding-inline-end: 1rem;
					top: var(--theme-navbar-height);
					width: var(--theme-left-sidebar-width);
					background: transparent;
				}
			}

			@media (min-width: 72em) {
				#main-content {
					margin-right: var(--theme-right-sidebar-width);
				}
				#right-sidebar {
					display: flex;
				}
			}
		</style>
		<script is:inline>
			// This code was migrated/copied from ThemToggleBotton to make the
			// dark mode toggle instant, vs. hidden inside of a Preact useEffect() call.
			const theme = (() => {
				if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
					return localStorage.getItem('theme');
				}
				if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
					return 'dark';
				}
				return 'light';
			})();
			if (theme === 'light') {
				document.documentElement.classList.remove('theme-dark');
			} else {
				document.documentElement.classList.add('theme-dark');
			}
		</script>
	</head>

	<body>
		<Header {currentPage} />
		<main class="layout">
			<aside id="left-sidebar" class="sidebar">
				<LeftSidebar {currentPage} />
			</aside>
			<aside id="right-sidebar" class="sidebar">
				{!hideRightSidebar && <RightSidebar content={content} githubEditUrl={githubEditUrl} />}
			</aside>
			<div id="main-content" lang={isFallback && 'en'}>
				<PageContent {content} {githubEditUrl} {currentPage}>
					<slot name="header" />
					{isFallback && <FallbackNotice />}
					<slot />
				</PageContent>
			</div>
		</main>
	</body>
</html>
